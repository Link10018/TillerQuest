datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  NEW
  USER
  ARCHIVED
  ADMIN
}

enum SchoolClass {
  Class_1IM1
  Class_1IM2
  Class_1IM3
  Class_1IM4
  Class_2IT1
  Class_2IT2
  Class_2IT3
  Class_2MP1
}

enum Class {
  Druid
  Wizard
  Barbarian
  BloodMage
  Bard
}

// Categories used for ability tabs and tree-grouping
enum AbilityCategory {
  // Generic types
  Health
  Mana
  Experience
  Damage
  Strength
  Agility
  Trickery
  Magic
  Heal
  Adventurer
  Cosmic
  Dungeon

  // Class specific types
  Druid
  Wizard
  Barbarian
  BloodMage
  Bard
}

// The ability-logic to be used
enum AbilityType {
  // Abilities
  Heal
  XP
  Mana
  Swap
  Transfer
  Trade
  Revive
  Damage
  ArenaToken
  Gold

  // Dungeons
  TurnPassive
  DungeonAttack

  // Passives
  Deathsave
  Cosmic
  All

  Health
  ManaPassive
  Experience
  Protection
  Strength
  Agility
  Trickery
  Postpone
  Magic
  Adventurer
  Arena
  Turns
  GoldPassive
  IncreaseHealth
  DecreaseHealth
  IncreaseMana
  DecreaseMana
}

enum AbilityTarget {
  Self
  SingleTarget
  MultiTarget
  All
  Others
}

enum GameStatus {
  PENDING
  INPROGRESS
  FINISHED
}

enum Rarity {
  Common
  Uncommon
  Rare
  Epic
  Legendary
}

enum ShopItemType {
  Title
  Badge
}

model User {
  id          String       @id @default(cuid())
  name        String?
  username    String?      @unique
  lastname    String?
  title       String?      @default("Newborn")
  schoolClass SchoolClass?
  class       Class?
  image       String?
  turns       Int          @default(0)

  level    Int      @default(0)
  xp       Int      @default(1)
  hp       Int      @default(40)
  hpMax    Int      @default(40)
  mana     Int      @default(0)
  manaMax  Int      @default(40)
  lastMana DateTime @default(now()) // Last time user recieved mana in ISO 8601 date-time format. User should not get more mana on account creation. 

  gemstones   Int        @default(1)
  gold        Int        @default(0)
  arenaTokens Int        @default(0)
  special     String[] // notes and other information
  inventory   ShopItem[] // m-n relation to shop items. A user can own many shop items
  games       Game[] // m-n relation to games. A user can have many games

  abilities UserAbility[] // m-n relation to abilities. A user can have many abilities

  passives UserPassive[] // m-n relation to user passives. A user can have many passives

  guild     Guild?  @relation(fields: [guildName], references: [name], onUpdate: Cascade)
  guildName String?

  role UserRole @default(NEW)

  readMessages    SystemMessage[] @relation("ReadMessages") // m-n relation to system messages. A user can read many system messages
  publicHighscore Boolean         @default(false)
  archiveConsent  Boolean         @default(false)
  email           String?         @unique
  emailVerified   DateTime?
  accounts        Account[] // Relation to OAuth account
  // sessions      Session[]      
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  logs      Log[] // m-n relation to logs. A user can have many logs
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Session   Session[]

  @@index([username])
}

model Guild {
  name        String       @id
  icon        String?
  schoolClass SchoolClass?

  enemies GuildEnemy[]
  members User[]
}

model Ability {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  category     AbilityCategory // Can be generic or class specific
  type         AbilityType
  target       AbilityTarget   @default(Self) // -1 means self, 0 means all, 1 means single target, 2+ means multi-target
  description  String?
  duration     Int?
  icon         String?
  gemstoneCost Int             @default(1)
  manaCost     Int?
  healthCost   Int?
  xpGiven      Int?
  value        Int?
  diceNotation String? // Dice notation for random values. Eg. 1d6+2
  isDungeon    Boolean         @default(false) // If the ability is a dungeon ability

  purchaseable Boolean  @default(true)
  cosmicEvent  String[] // m-n relation to cosmic events. An ability can be connected to many cosmic events

  parentAbility String? // m-n relation to parent abilities. An ability can have many parent abilities
  parent        Ability?  @relation("AbilityHierarchy", fields: [parentAbility], references: [name], onDelete: NoAction, onUpdate: NoAction)
  children      Ability[] @relation("AbilityHierarchy")

  users        UserAbility[] // m-n relation to users. An ability can be owned by many users 
  userPassives UserPassive[] // m-n relation to user passives. An ability can have passives on many users 

  cosmic CosmicEvent[]

  @@index([name])
}

model Enemy {
  id        Int    @id @default(autoincrement())
  name      String
  icon      String
  attack    Int
  maxHealth Int    @default(10)
  xp        Int    @default(0)
  gold      Int    @default(0)

  GuildEnemy GuildEnemy[]
}

model GuildEnemy {
  id        String @id @default(cuid())
  enemyId   Int
  enemy     Enemy  @relation(fields: [enemyId], references: [id])
  guildName String
  guild     Guild  @relation(fields: [guildName], references: [name])
  name      String
  health    Int
}

// relational model to explicitly manage the M-N relationship between User and Ability
model UserAbility {
  id          String  @id @default(cuid())
  userId      String
  abilityName String
  fromCosmic  Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ability     Ability @relation(fields: [abilityName], references: [name], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, abilityName])
}

// relational model to explicitly manage the M-N relationship between User and Ability
model UserPassive {
  id          String      @id @default(cuid())
  userId      String
  passiveName String
  abilityName String?
  cosmicEvent Boolean     @default(false)
  icon        String?
  effectType  AbilityType
  endTime     DateTime?
  value       Int?

  user    User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ability Ability? @relation(fields: [abilityName], references: [name], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, abilityName])
}

model CosmicEvent {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  icon        String    @default("Cosmic.png")
  recommended Boolean   @default(false)
  selected    Boolean   @default(false)
  presetDate  DateTime?
  occurrences Int       @default(0)
  frequency   Int       @default(100) // 1-100. 100 is the highest frequency. 1 is the lowest

  automatic         Boolean      @default(false)
  increaseCostType  AbilityType? // if the cosmic event should increase stats or ability values
  increaseCostValue Int? // the value to increase
  blockAbilityType  AbilityType? // if the cosmic event should block ability types
  triggerAtNoon     Boolean      @default(false)
  grantAbility      Boolean      @default(false)
  abilityName       String? // if the cosmic event should grant an ability or passive

  ability Ability? @relation(fields: [abilityName], references: [name], onUpdate: Cascade)

  @@index([name])
}

model ShopItem {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  icon        String?
  price       Int
  rarity      Rarity       @default(Common)
  type        ShopItemType
  levelReq    Int?
  classReq    Class?
  specialReq  String?
  users       User[] // m-n relation to users. An item can be owned by many users

  @@index([name])
  @@index([type])
}

model Log {
  id        String   @id @default(cuid())
  userId    String
  global    Boolean  @default(true) // If the log contains useful global information for game masters
  debug     Boolean  @default(false) // If the log is for debugging purposes
  message   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SystemMessage {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())

  readers User[] @relation("ReadMessages")
}

model Game {
  id        String     @id @default(cuid())
  game      String
  userId    String
  score     Int        @default(0)
  startedAt DateTime   @default(now())
  status    GameStatus @default(PENDING)
  metadata  Json?
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model TypeQuestText {
  id   Int    @id @default(autoincrement())
  text String @unique
}

// 3rd party authentication. OAuth
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ApplicationSettings {
  key       String   @id
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@unique([identifier, token])
// }

// // Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @id @map("_id")
//   userId               String  @db.ObjectId
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId, credentialID])
// }
